<?php

namespace Proxies;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class BackendCoreBundleEntityTarifProxy extends \Backend\CoreBundle\Entity\Tarif implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }
    
    
    public function getId()
    {
        $this->__load();
        return parent::getId();
    }

    public function setTarifAdulte($tarifAdulte)
    {
        $this->__load();
        return parent::setTarifAdulte($tarifAdulte);
    }

    public function getTarifAdulte()
    {
        $this->__load();
        return parent::getTarifAdulte();
    }

    public function setTypePassage($typePassage)
    {
        $this->__load();
        return parent::setTypePassage($typePassage);
    }

    public function getTypePassage()
    {
        $this->__load();
        return parent::getTypePassage();
    }

    public function setPeriode($periode)
    {
        $this->__load();
        return parent::setPeriode($periode);
    }

    public function getPeriode()
    {
        $this->__load();
        return parent::getPeriode();
    }

    public function setTarifEnfant($tarifEnfant)
    {
        $this->__load();
        return parent::setTarifEnfant($tarifEnfant);
    }

    public function getTarifEnfant()
    {
        $this->__load();
        return parent::getTarifEnfant();
    }

    public function setTarifBebe($tarifBebe)
    {
        $this->__load();
        return parent::setTarifBebe($tarifBebe);
    }

    public function getTarifBebe()
    {
        $this->__load();
        return parent::getTarifBebe();
    }

    public function setTaxeAdulte($taxeAdulte)
    {
        $this->__load();
        return parent::setTaxeAdulte($taxeAdulte);
    }

    public function getTaxeAdulte()
    {
        $this->__load();
        return parent::getTaxeAdulte();
    }

    public function setTaxeEnfant($taxeEnfant)
    {
        $this->__load();
        return parent::setTaxeEnfant($taxeEnfant);
    }

    public function getTaxeEnfant()
    {
        $this->__load();
        return parent::getTaxeEnfant();
    }

    public function setTaxeBebe($taxeBebe)
    {
        $this->__load();
        return parent::setTaxeBebe($taxeBebe);
    }

    public function getTaxeBebe()
    {
        $this->__load();
        return parent::getTaxeBebe();
    }

    public function setActive($active)
    {
        $this->__load();
        return parent::setActive($active);
    }

    public function getActive()
    {
        $this->__load();
        return parent::getActive();
    }

    public function setVols(\Backend\CoreBundle\Entity\Vols $vols)
    {
        $this->__load();
        return parent::setVols($vols);
    }

    public function getVols()
    {
        $this->__load();
        return parent::getVols();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'tarifAdulte', 'typePassage', 'periode', 'tarifEnfant', 'tarifBebe', 'taxeAdulte', 'taxeEnfant', 'taxeBebe', 'active', 'vols');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields AS $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}